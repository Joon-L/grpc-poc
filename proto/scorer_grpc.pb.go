// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scorerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScorerClient is the client API for Scorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScorerClient interface {
	Score(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error)
	StreamingRequestScore(ctx context.Context, opts ...grpc.CallOption) (Scorer_StreamingRequestScoreClient, error)
	StreamingResponseScore(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (Scorer_StreamingResponseScoreClient, error)
	BidirectionalScore(ctx context.Context, opts ...grpc.CallOption) (Scorer_BidirectionalScoreClient, error)
}

type scorerClient struct {
	cc grpc.ClientConnInterface
}

func NewScorerClient(cc grpc.ClientConnInterface) ScorerClient {
	return &scorerClient{cc}
}

func (c *scorerClient) Score(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error) {
	out := new(InferenceResponse)
	err := c.cc.Invoke(ctx, "/scorer.Scorer/Score", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorerClient) StreamingRequestScore(ctx context.Context, opts ...grpc.CallOption) (Scorer_StreamingRequestScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scorer_ServiceDesc.Streams[0], "/scorer.Scorer/StreamingRequestScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &scorerStreamingRequestScoreClient{stream}
	return x, nil
}

type Scorer_StreamingRequestScoreClient interface {
	Send(*InferenceRequest) error
	CloseAndRecv() (*InferenceResponse, error)
	grpc.ClientStream
}

type scorerStreamingRequestScoreClient struct {
	grpc.ClientStream
}

func (x *scorerStreamingRequestScoreClient) Send(m *InferenceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scorerStreamingRequestScoreClient) CloseAndRecv() (*InferenceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InferenceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scorerClient) StreamingResponseScore(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (Scorer_StreamingResponseScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scorer_ServiceDesc.Streams[1], "/scorer.Scorer/StreamingResponseScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &scorerStreamingResponseScoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scorer_StreamingResponseScoreClient interface {
	Recv() (*InferenceResponse, error)
	grpc.ClientStream
}

type scorerStreamingResponseScoreClient struct {
	grpc.ClientStream
}

func (x *scorerStreamingResponseScoreClient) Recv() (*InferenceResponse, error) {
	m := new(InferenceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scorerClient) BidirectionalScore(ctx context.Context, opts ...grpc.CallOption) (Scorer_BidirectionalScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scorer_ServiceDesc.Streams[2], "/scorer.Scorer/BidirectionalScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &scorerBidirectionalScoreClient{stream}
	return x, nil
}

type Scorer_BidirectionalScoreClient interface {
	Send(*InferenceRequest) error
	Recv() (*InferenceResponse, error)
	grpc.ClientStream
}

type scorerBidirectionalScoreClient struct {
	grpc.ClientStream
}

func (x *scorerBidirectionalScoreClient) Send(m *InferenceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scorerBidirectionalScoreClient) Recv() (*InferenceResponse, error) {
	m := new(InferenceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScorerServer is the server API for Scorer service.
// All implementations must embed UnimplementedScorerServer
// for forward compatibility
type ScorerServer interface {
	Score(context.Context, *InferenceRequest) (*InferenceResponse, error)
	StreamingRequestScore(Scorer_StreamingRequestScoreServer) error
	StreamingResponseScore(*InferenceRequest, Scorer_StreamingResponseScoreServer) error
	BidirectionalScore(Scorer_BidirectionalScoreServer) error
	mustEmbedUnimplementedScorerServer()
}

// UnimplementedScorerServer must be embedded to have forward compatible implementations.
type UnimplementedScorerServer struct {
}

func (UnimplementedScorerServer) Score(context.Context, *InferenceRequest) (*InferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Score not implemented")
}
func (UnimplementedScorerServer) StreamingRequestScore(Scorer_StreamingRequestScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRequestScore not implemented")
}
func (UnimplementedScorerServer) StreamingResponseScore(*InferenceRequest, Scorer_StreamingResponseScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingResponseScore not implemented")
}
func (UnimplementedScorerServer) BidirectionalScore(Scorer_BidirectionalScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalScore not implemented")
}
func (UnimplementedScorerServer) mustEmbedUnimplementedScorerServer() {}

// UnsafeScorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScorerServer will
// result in compilation errors.
type UnsafeScorerServer interface {
	mustEmbedUnimplementedScorerServer()
}

func RegisterScorerServer(s grpc.ServiceRegistrar, srv ScorerServer) {
	s.RegisterService(&Scorer_ServiceDesc, srv)
}

func _Scorer_Score_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorerServer).Score(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scorer.Scorer/Score",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorerServer).Score(ctx, req.(*InferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorer_StreamingRequestScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScorerServer).StreamingRequestScore(&scorerStreamingRequestScoreServer{stream})
}

type Scorer_StreamingRequestScoreServer interface {
	SendAndClose(*InferenceResponse) error
	Recv() (*InferenceRequest, error)
	grpc.ServerStream
}

type scorerStreamingRequestScoreServer struct {
	grpc.ServerStream
}

func (x *scorerStreamingRequestScoreServer) SendAndClose(m *InferenceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scorerStreamingRequestScoreServer) Recv() (*InferenceRequest, error) {
	m := new(InferenceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Scorer_StreamingResponseScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InferenceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScorerServer).StreamingResponseScore(m, &scorerStreamingResponseScoreServer{stream})
}

type Scorer_StreamingResponseScoreServer interface {
	Send(*InferenceResponse) error
	grpc.ServerStream
}

type scorerStreamingResponseScoreServer struct {
	grpc.ServerStream
}

func (x *scorerStreamingResponseScoreServer) Send(m *InferenceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Scorer_BidirectionalScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScorerServer).BidirectionalScore(&scorerBidirectionalScoreServer{stream})
}

type Scorer_BidirectionalScoreServer interface {
	Send(*InferenceResponse) error
	Recv() (*InferenceRequest, error)
	grpc.ServerStream
}

type scorerBidirectionalScoreServer struct {
	grpc.ServerStream
}

func (x *scorerBidirectionalScoreServer) Send(m *InferenceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scorerBidirectionalScoreServer) Recv() (*InferenceRequest, error) {
	m := new(InferenceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Scorer_ServiceDesc is the grpc.ServiceDesc for Scorer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scorer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scorer.Scorer",
	HandlerType: (*ScorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Score",
			Handler:    _Scorer_Score_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRequestScore",
			Handler:       _Scorer_StreamingRequestScore_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingResponseScore",
			Handler:       _Scorer_StreamingResponseScore_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalScore",
			Handler:       _Scorer_BidirectionalScore_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "scorer.proto",
}
